<?php

namespace Main\CommonBundle\Entity\Geo;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Main\CommonBundle\Entity\Geo\Town;

/**
 * CommuneRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TownRepository extends EntityRepository
{
	/**
	 * [findByDeptAndCountry description]
	 * @param  [type] $dept    [description]
	 * @param  [type] $country [description]
	 * @return [type]          [description]
	 */
	public function findByDeptAndCountry($dept, $country)
	{
		$qb = $this->_em->createQueryBuilder();
		$qb->select('(t.name) as name','t.id as id')
			->from('MainCommonBundle:Geo\Town', 't')
			->where('t.country = :countryId')
			->andWhere('t.department = :deptId')
			->setParameters(array(
					'countryId' => $country,
					'deptId'	=> $dept
				));
		$query = $qb->getQuery();
		$query->setResultCacheId('findByDeptAndCountry_'.$dept.'_'.$country);
		$query->useQueryCache(true);
		$query->useResultCache(true);
		$query->useResultCache(true, 86400, 'findByDeptAndCountry_'.$dept.'_'.$country);
		return $query->getResult();
	}
	
	/**
	 * 
	 * @param Town $town
	 * @param unknown $radius
	 */
	public function getTownsIntoRadius(Town $town, $radius)
	{
		$sql = " 
        SELECT id FROM geo.town
		WHERE
		(((
      acos(
          sin((:latitude *pi()/180)) * sin((latitude*pi()/180)) + cos((:latitude *pi()/180)) * cos((latitude*pi()/180)) * cos(((:longitude - longitude)*pi()/180))
        )
    )*180/pi())*60*2.133) <= :radius	
    ";

    $stmt = $this->_em->getConnection()->prepare($sql);
    $stmt->bindValue("latitude", $town->getLatitude());
    $stmt->bindValue("longitude", $town->getLongitude());
    $stmt->bindValue("radius", $radius);
    $stmt->execute();
    return $stmt->fetchAll();
	}

	/**
	 * [findByPhotographer description]
	 * @param  [type] $photographer [description]
	 * @return [type]               [description]
	 */
	public function findTownsByCompany($company)
	{
		$qb = $this->_em->createQueryBuilder();
		$qb->select('(t.name) as name','t.id as id')
			->from('MainCommonBundle:Photographers\Move', 'm')
			->leftjoin('m.town', 't')
			->where('m.company = :company')
			->setParameter('company',$company);
		$query = $qb->getQuery();
		$query->setResultCacheId('findTownsByPhotographer_'.$company);
		$query->useQueryCache(true);
		$query->useResultCache(true, 86400, 'findTownsByPhotographer_'.$company);
		return $query->getResult();
	}
	
}
